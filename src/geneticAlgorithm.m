function [best_feature, best_fitness] =  geneticAlgorithm(mat_features, ...
    events, classifier, k)

    pop_size = 20;
    nb_features = size(mat_features, 2);
    
    pop = initPop(pop_size, nb_features);
    
    type fitnessFunction
    obj = @(pop) fitnessFunction( mat_features, pop, pop_size, events, classifier, k);
    obj(pop)
    
    % Solve With Genetic Algorithm
    % Find best trading rule and maximum Sharpe ratio (min -Sharpe ratio)
    options = gaoptimset('Display','iter','PopulationType','bitstring',...
        'PopulationSize',size(pop,1),...
        'InitialPopulation',pop,...
        'Generations',50,...
        'EliteCount',2,...
        'SelectionFcn',{@selectiontournament, 4},...
        'CrossoverFcn',@crossoverscattered,...
        'MutationFcn', {@mutationuniform, 0.2},...
        'FitnessLimit',0,...
        'PlotFcns', @gaplotbestf,...
        'Vectorized','on');
    
    [best_feature, best_fitness] = ga(obj,size(pop,2),[],[],[],[],[],[],[],options);

end